name: Sara Engine CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "sara-engine/**"
      - ".github/workflows/sara-*.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "sara-engine/**"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  WORKING_DIR: ./sara-engine

jobs:
  # Detect changes to determine if we should run the pipeline
  changes:
    runs-on: ubuntu-latest
    outputs:
      sara: ${{ steps.filter.outputs.sara }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Sara engine changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            sara:
              - 'sara-engine/**'
              - '.github/workflows/sara-*.yml'

  # Setup Python environment and dependencies
  setup:
    needs: changes
    if: needs.changes.outputs.sara == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(format('{0}/pyproject.toml', env.WORKING_DIR)) }}

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev] || pip install -e .

      - name: Cache Python environment
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/.venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles(format('{0}/pyproject.toml', env.WORKING_DIR)) }}

  # Code quality checks
  lint:
    needs: [setup, changes]
    if: needs.changes.outputs.sara == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(format('{0}/pyproject.toml', env.WORKING_DIR)) }}

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -e . || true
          pip install ruff black isort bandit safety

      - name: Run ruff
        working-directory: ${{ env.WORKING_DIR }}
        run: ruff check . --exclude migrations/

      - name: Run black
        working-directory: ${{ env.WORKING_DIR }}
        run: black --check --diff .

      - name: Run isort
        working-directory: ${{ env.WORKING_DIR }}
        run: isort --check-only --diff .

      - name: Run bandit security scan
        working-directory: ${{ env.WORKING_DIR }}
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report-${{ github.sha }}
          path: ${{ env.WORKING_DIR }}/bandit-report.json

      - name: Check dependencies security
        working-directory: ${{ env.WORKING_DIR }}
        run: safety check --json --output safety-report.json || true

      - name: Upload safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-security-report-${{ github.sha }}
          path: ${{ env.WORKING_DIR }}/safety-report.json

  # Unit tests
  test:
    needs: [setup, changes]
    if: needs.changes.outputs.sara == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles(format('{0}/pyproject.toml', env.WORKING_DIR)) }}

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests with coverage
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pytest tests/ --cov=sara --cov-report=xml --cov-report=html --cov-report=term-missing -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          directory: ${{ env.WORKING_DIR }}
          flags: sara-engine
          name: sara-engine-coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-python-${{ matrix.python-version }}-${{ github.sha }}
          path: ${{ env.WORKING_DIR }}/htmlcov/

  # Integration tests
  integration:
    needs: [test, changes]
    if: needs.changes.outputs.sara == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Test CLI functionality
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Test sara init
          sara init || echo "Init completed"

          # Test basic commands
          sara --help

          # Test embedding functionality (if available)
          echo "Testing embedding functionality..."
          sara embed stats || echo "No embeddings yet"

      - name: Test HTTP server
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Start server in background
          sara serve --host 127.0.0.1 --port 8765 &
          SERVER_PID=$!

          # Wait for server to start
          sleep 10

          # Test health endpoint
          curl -f http://127.0.0.1:8765/health || exit 1

          # Test basic API endpoints
          curl -f http://127.0.0.1:8765/docs || echo "Docs endpoint not available"

          # Stop server
          kill $SERVER_PID || true

  # Build and test Docker image
  docker:
    needs: [lint, test, changes]
    if: needs.changes.outputs.sara == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          docker build -t sara-engine:${{ github.sha }} .
          docker build -t sara-engine:latest .

      - name: Test Docker image
        run: |
          # Test basic container functionality
          docker run --rm sara-engine:${{ github.sha }} sara --help

          # Test server startup
          docker run -d --name sara-test -p 8766:8765 sara-engine:${{ github.sha }}
          sleep 15

          # Test health endpoint
          curl -f http://localhost:8766/health || exit 1

          # Cleanup
          docker stop sara-test
          docker rm sara-test

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: sara-engine:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Save Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker save sara-engine:${{ github.sha }} | gzip > sara-engine-image.tar.gz

      - name: Upload Docker image artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: sara-engine-docker-image-${{ github.sha }}
          path: sara-engine-image.tar.gz
          retention-days: 7

  # Performance tests
  performance:
    needs: [docker, changes]
    if: needs.changes.outputs.sara == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Run performance benchmarks
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ -f scripts/performance_benchmark.py ]; then
            python scripts/performance_benchmark.py
          else
            echo "No performance benchmarks found"
          fi

  # Build Python package
  build:
    needs: [lint, test, integration, changes]
    if: needs.changes.outputs.sara == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        working-directory: ${{ env.WORKING_DIR }}
        run: python -m build

      - name: Check package
        working-directory: ${{ env.WORKING_DIR }}
        run: python -m twine check dist/*

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sara-engine-package-${{ github.sha }}
          path: ${{ env.WORKING_DIR }}/dist/
          retention-days: 30

  # Deploy (only on main branch)
  deploy:
    needs: [docker, build, performance, changes]
    if: needs.changes.outputs.sara == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: sara-engine-docker-image-${{ github.sha }}

      - name: Load Docker image
        run: docker load < sara-engine-image.tar.gz

      - name: Deploy to production
        run: |
          echo "🚀 Deploying Sara Engine to production..."
          # Add your deployment commands here
          # Example: push to container registry, update container orchestration, etc.

          # Tag for registry
          docker tag sara-engine:${{ github.sha }} sara-engine:production

          echo "✅ Sara Engine deployed successfully"

  # Cleanup
  cleanup:
    needs: [deploy, performance, changes]
    if: always() && needs.changes.outputs.sara == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Docker
        run: |
          docker system prune -f
          docker volume prune -f

  # Notification
  notify:
    needs: [deploy, cleanup, changes]
    if: always() && needs.changes.outputs.sara == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success' || (needs.build.result == 'success' && github.ref != 'refs/heads/main')
        run: |
          echo "✅ Sara Engine CI/CD completed successfully!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Sara Engine CI/CD failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Check the workflow logs for details."
